{"version":3,"sources":["formatters/tableFormatter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAM,YAAY,SAAZ,SAAY,CAAC,QAAD,EAA6B;AAC3C,QAAM,OAAO,EAAP,CADqC;;AAG3C,QAAI,SAAS,MAAT,KAAoB,CAApB,EAAuB;AACvB,eAAO,EAAP,CADuB;KAA3B;;AAIA,SAAK,IAAL,CAAU,CACN,gBAAM,IAAN,CAAW,MAAX,CADM,EAEN,gBAAM,IAAN,CAAW,QAAX,CAFM,EAGN,gBAAM,IAAN,CAAW,MAAX,CAHM,EAIN,gBAAM,IAAN,CAAW,SAAX,CAJM,EAKN,gBAAM,IAAN,CAAW,SAAX,CALM,CAAV,EAP2C;;AAe3C,2BAAU,QAAV,EAAoB,UAAC,OAAD,EAAa;AAC7B,YAAI,oBAAJ,CAD6B;;AAG7B,YAAI,QAAQ,KAAR,IAAiB,QAAQ,QAAR,KAAqB,CAArB,EAAwB;AACzC,0BAAc,gBAAM,GAAN,CAAU,OAAV,CAAd,CADyC;SAA7C,MAEO;AACH,0BAAc,gBAAM,MAAN,CAAa,SAAb,CAAd,CADG;SAFP;;AAMA,aAAK,IAAL,CAAU,CACN,QAAQ,IAAR,IAAgB,CAAhB,EACA,QAAQ,MAAR,IAAkB,CAAlB,EACA,WAHM,EAIN,QAAQ,OAAR,CAAgB,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,CAJM,EAKN,QAAQ,MAAR,IAAkB,EAAlB,CALJ,EAT6B;KAAb,CAApB,CAf2C;;AAiC3C,WAAO,qBAAM,IAAN,EAAY;AACf,iBAAS;AACL,eAAG;AACC,uBAAO,CAAP;AACA,0BAAU,IAAV;aAFJ;AAIA,eAAG;AACC,uBAAO,CAAP;AACA,0BAAU,IAAV;aAFJ;AAIA,eAAG;AACC,uBAAO,CAAP;AACA,0BAAU,IAAV;aAFJ;AAIA,eAAG;AACC,8BAAc,CAAd;AACA,uBAAO,EAAP;AACA,0BAAU,IAAV;aAHJ;AAKA,eAAG;AACC,uBAAO,EAAP;AACA,0BAAU,IAAV;aAFJ;SAlBJ;AAuBA,4BAAoB,4BAAC,KAAD,EAAW;AAC3B,mBAAO,UAAU,CAAV,CADoB;SAAX;KAxBjB,CAAP,CAjC2C;CAA7B;;AA+DlB,IAAM,aAAa,SAAb,UAAa,CAAC,OAAD,EAA4B;AAC3C,QAAI,cAAJ,CAD2C;;AAG3C,YAAQ,mBAAM,OAAN,EAAe,UAAC,MAAD,EAAY;AAC/B,YAAI,CAAC,OAAO,QAAP,CAAgB,MAAhB,EAAwB;AACzB,mBAAO,EAAP,CADyB;SAA7B;;AAIA,eAAO,OAAO,QAAP,GAAkB,MAAlB,GAA2B,UAAU,OAAO,QAAP,CAArC,CALwB;KAAZ,CAAvB,CAH2C;;AAW3C,YAAQ,sBAAS,KAAT,CAAR,CAX2C;;AAa3C,WAAO,MAAM,IAAN,CAAW,IAAX,CAAP,CAb2C;CAA5B;;kBAgBJ,UAAC,MAAD,EAAgC;AAC3C,QAAI,eAAJ,CAD2C;;AAG3C,aAAS,EAAT,CAH2C;;AAK3C,QAAI,OAAO,UAAP,IAAqB,OAAO,YAAP,EAAqB;AAC1C,iBAAS,WAAW,OAAO,OAAP,CAApB,CAD0C;KAA9C;;AAIA,cAAU,OAAO,qBAAM,CACnB,CACI,gBAAM,GAAN,CAAU,yBAAU,OAAV,EAAmB,OAAO,UAAP,EAAmB,IAAtC,CAAV,CADJ,CADmB,EAInB,CACI,gBAAM,MAAN,CAAa,yBAAU,SAAV,EAAqB,OAAO,YAAP,EAAqB,IAA1C,CAAb,CADJ,CAJmB,CAAN,EAOd;AACC,iBAAS;AACL,eAAG;AACC,uBAAO,GAAP;AACA,0BAAU,IAAV;aAFJ;SADJ;AAMA,4BAAoB,wBAAW,IAAX,CAApB;KAda,CAAP,CATiC;;AA0B3C,WAAO,MAAP,CA1B2C;CAAhC","file":"formatters/tableFormatter.js","sourcesContent":["import _ from 'lodash';\nimport chalk from 'chalk';\nimport table from 'table';\nimport pluralize from 'pluralize';\nimport type {\n    ReportType\n} from './../types';\n\nconst drawTable = (messages: Array): string => {\n    const rows = [];\n\n    if (messages.length === 0) {\n        return '';\n    }\n\n    rows.push([\n        chalk.bold('Line'),\n        chalk.bold('Column'),\n        chalk.bold('Type'),\n        chalk.bold('Message'),\n        chalk.bold('Rule ID')\n    ]);\n\n    _.forEach(messages, (message) => {\n        let messageType;\n\n        if (message.fatal || message.severity === 2) {\n            messageType = chalk.red('error');\n        } else {\n            messageType = chalk.yellow('warning');\n        }\n\n        rows.push([\n            message.line || 0,\n            message.column || 0,\n            messageType,\n            message.message.replace(/\\.$/, ''),\n            message.ruleId || ''\n        ]);\n    });\n\n    return table(rows, {\n        columns: {\n            0: {\n                width: 8,\n                wrapWord: true\n            },\n            1: {\n                width: 8,\n                wrapWord: true\n            },\n            2: {\n                width: 8,\n                wrapWord: true\n            },\n            3: {\n                paddingRight: 5,\n                width: 50,\n                wrapWord: true\n            },\n            4: {\n                width: 20,\n                wrapWord: true\n            }\n        },\n        drawHorizontalLine: (index) => {\n            return index === 1;\n        }\n    });\n};\n\nconst drawReport = (results: Array): string => {\n    let files;\n\n    files = _.map(results, (result) => {\n        if (!result.messages.length) {\n            return '';\n        }\n\n        return result.filePath + '\\n\\n' + drawTable(result.messages);\n    });\n\n    files = _.filter(files);\n\n    return files.join('\\n');\n};\n\nexport default (report: ReportType): string => {\n    let result;\n\n    result = '';\n\n    if (report.errorCount || report.warningCount) {\n        result = drawReport(report.results);\n    }\n\n    result += '\\n' + table([\n        [\n            chalk.red(pluralize('Error', report.errorCount, true))\n        ],\n        [\n            chalk.yellow(pluralize('Warning', report.warningCount, true))\n        ]\n    ], {\n        columns: {\n            0: {\n                width: 110,\n                wrapWord: true\n            }\n        },\n        drawHorizontalLine: _.constant(true)\n    });\n\n    return result;\n};\n"],"sourceRoot":"/source/"}
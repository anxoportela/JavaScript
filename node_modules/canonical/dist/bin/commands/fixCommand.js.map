{"version":3,"sources":["bin/commands/fixCommand.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAWA,IAAM,cAAc,SAAd,WAAc,CAAC,IAAD,EAAU;;AAE1B;;;;KAEK,MAFL,CAEY,CAFZ,EAEe,CAFf,EAGK,IAHL,CAF0B;;AAO1B,8BACK,IADL,CACU,UAAC,KAAD,EAAW;AACb,YAAM,SAAS,wBAAQ,KAAR,EAAe;AAC1B,oBAAQ,KAAK,MAAL;SADG,CAAT;;;AADO,eAMb,CAAQ,GAAR,CAAY,MAAZ;;AANa,KAAX,CADV,CAP0B;CAAV;;AAmBpB,IAAM,kBAAkB,SAAlB,eAAkB,CAAC,IAAD,EAAU;;AAE9B,oBAEK,MAFL,CAEY,CAFZ,EAGK,IAHL,CAF8B;;AAO9B,QAAM,cAAc,yBAAe,KAAK,CAAL,CAA7B,CAPwB;;AAS9B,QAAM,SAAS,yBAAS,WAAT,CAAT;;;AATwB,WAY9B,CAAQ,GAAR,CAAY,MAAZ;;AAZ8B,CAAV;;kBAgBT,UAAC,QAAD,EAAc;AACzB,aACK,WADL,CACiB,KADjB,EAEK,IAFL,mBADyB;;AAKzB,QAAM,OAAO,qBAAM,QAAQ,IAAR,CAAa,MAAb,CAAoB,CAApB,CAAN,EACR,WADQ,CACI,KADJ,EAER,IAFQ,mBAGR,IAHQ,CAGH,MAHG,EAIR,MAJQ,GAKR,OALQ,CAKA;AACL,eAAO;AACH,qBAAS,KAAT;AACA,sBAAU,6DAAV;AACA,kBAAM,SAAN;SAHJ;AAKA,gBAAQ;;AAEJ,qBAAS,CACL,KADK,EAEL,IAFK,EAGL,MAHK,EAIL,MAJK,CAAT;AAMA,oBAAQ,KAAR;AACA,sBAAU,sBAAV;SATJ;KAXK,EAuBR,IAvBQ,CALY;;AA8BzB,QAAI,KAAK,KAAL,EAAY;AACZ,oBAAY,IAAZ,EADY;KAAhB,MAEO;AACH,wBAAgB,IAAhB,EADG;KAFP;CA9BW","file":"bin/commands/fixCommand.js","sourcesContent":["import yargs from 'yargs';\nimport getStdin from 'get-stdin';\nimport {\n    fixFiles,\n    fixText\n} from './../../utilities';\nimport {\n    failHandler,\n    getTargetPaths\n} from './../../utilities/bin';\n\nconst handleStdin = (argv) => {\n    /* eslint-disable no-unused-expressions */\n    yargs\n    /* eslint-enable */\n        .demand(0, 0)\n        .argv;\n\n    getStdin()\n        .then((stdin) => {\n            const result = fixText(stdin, {\n                syntax: argv.syntax\n            });\n\n            /* eslint-disable no-console */\n            console.log(result);\n            /* eslint-enable */\n        });\n};\n\nconst handleFilePaths = (argv) => {\n    /* eslint-disable no-unused-expressions */\n    yargs\n    /* eslint-enable */\n        .demand(1)\n        .argv;\n\n    const targetPaths = getTargetPaths(argv._);\n\n    const report = fixFiles(targetPaths);\n\n    /* eslint-disable no-console */\n    console.log(report);\n    /* eslint-enable */\n};\n\nexport default (subYargs) => {\n    subYargs\n        .exitProcess(false)\n        .fail(failHandler);\n\n    const argv = yargs(process.argv.splice(3))\n        .exitProcess(false)\n        .fail(failHandler)\n        .help('help')\n        .strict()\n        .options({\n            stdin: {\n                default: false,\n                describe: 'Used to indicate that subject body will be read from stdin.',\n                type: 'boolean'\n            },\n            syntax: {\n                // @todo This need to be true when using stdin.\n                choices: [\n                    'css',\n                    'js',\n                    'json',\n                    'scss'\n                ],\n                demand: false,\n                describe: 'Syntax of the input.'\n            }\n        })\n        .argv;\n\n    if (argv.stdin) {\n        handleStdin(argv);\n    } else {\n        handleFilePaths(argv);\n    }\n};\n"],"sourceRoot":"/source/"}
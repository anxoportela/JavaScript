{"version":3,"sources":["utilities/lintText.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAM,QAAQ,wBAAI,GAAJ,CAAR;;kBAES,UAAC,IAAD,EAAe,OAAf,EAA4D;AACvE,QAAI,eAAJ,CADuE;;AAGvE,QAAM,OAAO,iBAAO,UAAP,CAAkB,MAAlB,EAA0B,MAA1B,CAAiC,OAAO,KAAK,SAAL,CAAe,OAAf,CAAP,CAAjC,CAAiE,MAAjE,CAAwE,KAAxE,CAAP,CAHiE;;AAKvE,aAAS,MAAM,GAAN,CAAU,IAAV,CAAT,CALuE;;AAOvE,QAAI,MAAJ,EAAY;AACR,eAAO,MAAP,CADQ;KAAZ;;AAIA,QAAI,QAAQ,MAAR,KAAmB,KAAnB,EAA0B;AAC1B,iBAAS,oBAAa,IAAb,CAAT,CAD0B;KAA9B,MAEO,IAAI,QAAQ,MAAR,KAAmB,IAAnB,EAAyB;AAChC,iBAAS,kBAAW,IAAX,CAAT,CADgC;KAA7B,MAEA,IAAI,QAAQ,MAAR,KAAmB,MAAnB,EAA2B;AAClC,iBAAS,oBAAa,IAAb,CAAT,CADkC;KAA/B,MAEA,IAAI,QAAQ,MAAR,KAAmB,MAAnB,EAA2B;AAClC,iBAAS,oBAAa,IAAb,CAAT,CADkC;KAA/B,MAEA;AACH,cAAM,IAAI,KAAJ,CAAU,qBAAqB,QAAQ,MAAR,GAAiB,IAAtC,CAAhB,CADG;KAFA;;AAMP,QAAI,QAAQ,QAAR,EAAkB;AAClB,eAAO,QAAP,GAAkB,QAAQ,QAAR,CADA;KAAtB;;AAIA,UAAM,GAAN,CAAU,IAAV,EAAgB,MAAhB,EA3BuE;;AA6BvE,WAAO,MAAP,CA7BuE;CAA5D","file":"utilities/lintText.js","sourcesContent":["import {\n    lintText as lintJsText\n} from './../syntaxes/js';\nimport {\n    lintText as lintJsonText\n} from './../syntaxes/json';\nimport {\n    lintText as lintScssText\n} from './../syntaxes/scss';\nimport crypto from 'crypto';\nimport LRU from 'lru-cache';\nimport type {\n    LintResultType,\n    LintOptionsType\n} from './../types';\n\nconst cache = LRU(500);\n\nexport default (text: string, options: LintOptionsType): LintResultType => {\n    let result;\n\n    const hash = crypto.createHash('sha1').update(text + JSON.stringify(options)).digest('hex');\n\n    result = cache.get(hash);\n\n    if (result) {\n        return result;\n    }\n\n    if (options.syntax === 'css') {\n        result = lintScssText(text);\n    } else if (options.syntax === 'js') {\n        result = lintJsText(text);\n    } else if (options.syntax === 'json') {\n        result = lintJsonText(text);\n    } else if (options.syntax === 'scss') {\n        result = lintScssText(text);\n    } else {\n        throw new Error('Unknown syntax \"' + options.syntax + '\".');\n    }\n\n    if (options.filePath) {\n        result.filePath = options.filePath;\n    }\n\n    cache.set(hash, result);\n\n    return result;\n};\n"],"sourceRoot":"/source/"}